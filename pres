Current version:
https://github.com/luser-dr00g/8086/blob/master/pres



The Hype Train...


I've been working on a Forth interpreter as a side project, it's almost
powerful enough to be considered a primitive OS. With some help from
comp.lang.forth it can define procedures with control structures and
execute them.

$ ./a8086
0 var !
OK
4 var push 5 var push 6 var push
OK
var pop . var pop . var pop .
6 5 4 OK
: a 0 if 6 else 7 then ;
OK
a .
7 OK
: b 1 if 6 else 7 then ;
OK
b .
6 OK
bye

https://github.com/luser-dr00g/8086

...

 I've been thinking about it and I probably could do a talk about
 interpreters. I've written ones for PostScript, Lisp, BF, APL, and
 recently Forth.  The Forth one is the most bizarre, but perhaps easy
 to talk about because it's very short.

https://github.com/luser-dr00g/8086
    $ make count
    wc a8086.c asm8086.h fdict.h forth3.h undefs.h cp437.h
    465  2233 21671 a8086.c
    86   269  2589 asm8086.h
    104   468  3024 fdict.h
    479  2260 25588 forth3.h
    61   122   875 undefs.h
    47   200  1988 cp437.h
    1242  5552 55735 total

I haven't really thought through any of the details.  I could do an
overview of the whole process: lexing, parsing, IR, execution. And
supplement with specific examples.  If it's concentrated on the Forth
interpreter, I'd probably focus on the details of 8086 machine code
instruction formats, execution of the byte code, and then the higher
level parts like assembling the instructions and how the Indirect
Threaded Code works.

...

I'm planning to do a talk in a few weeks for the Computer Club about
my Forth interpreter. It will cover 8086 machine code
assembly/disassembly and the behavior of the classic Indirect Threaded
Code model of early Forths (modern ones typically do it
differently).

...
Outline interspersed with clf discussion about my plan for this talk.

I joined up with my school's Computer Club and offered
to give a talk about my forth interpreter. So I've made
a half-hearted outline of the topics that I need to cover.
Anything seem amiss or missing? Will this be interesting
to a group of a dozen undergrads?

    Generic Interpreter design
    * Lexical analysis
    * Syntactical analysis
    * Lukasiewicz notation (the "Polish guy")
    * Reverse Polish notation
    * * Forth:
    * Byte code interpreter.
    * Runtime support functions.

    X-Macros.
    --aggressive factoring into a CPP DSL

    The 8086 machine
    * Opcode format
    * Execution of the emulator
    * Interrupts
    * Bridge to Higher Level

    Forth language
    * Forth internals
    * * Address interpreter using SI for Forth IP.
    * * Subroutine calls using ENTER EXIT and the return Stack.
    * Defining CODE words and WORD words in the Forth dictionary.
    * Text Interpreter
    * boot code
    * Constants and Variables as alternatives to ENTER.
    * * Compiling colon definitions.
    * * Compiling control structures.

    Future Work


...

> > That should fill up the better part of an hour and leave room
> > for questions I think. Thanks, rubberducks!
>
Rick C wrote:
> Do you have any idea of the level of knowledge of your audience?
>

I think most of them are at least sophomore level CS students. I'd guess
a few have taken compilers and all have written moderately complex
C and/or Java programs. Some will have taken the machine architecture
course which when I took it (20 years ago) covered 8086 assembly
(or maybe it was pretend 8086 in a 386 context), but not to the level
of encoding the machine instructions.

A.K. wrote:
> Just my 5 cents:
> 
> From a didactical viewpoint it can be 'counterproductive' (to say it mildly)
> to stress Forth's exoticicims by explaining the gory innards of a Forth
> interpreter. Many modern Forth's are native code compilers btw...

Anton Ertl wrote:
> Understanding how Forth worked is what got me hooked.
> 
> Also, I think his presentation is about his interpreter, and Forth is
> only explained in order to explain that, not the other way round.

A.K. wrote:
> It might make more sense to explain Forth's strength by use cases. Probably the
> most important use case being flexible programming of embedded small devices.

That makes sense for the purpose of teaching Forth. I think my porpose
here is more to show off my code and explain how it works. So some degree
of gory innards are necessary for the code to be comprehensible.

I'm only just at the threshold of starting to write code *in* Forth
to run on the interpreter. I want to get it to read from memory so I
can write code in 64 char-per-line screens. Then maybe I'll find some
application to try to build using it, probably an interpreter lol.

A.K. wrote:
> Okay. So it is more of an assembler programming show, with building a Forth
> interpreter as use case.

Right. At least that's the level where I'm most qualified to speak.
I simply haven't written any significant amount of Forth code per se.

The modest milestone for this interpreter will be implementing the 79
standard. Then I'll assess and decide what to do further.

A.K. wrote:
> Once you're there change/add some words to make the kernel ISO-Forth like
> (Forth-79 is not too much different from Forth-94) and run Hayes' core tester.

> Then you'll have a sound foundation for further development.


Incidentally, the current draft outline is here, including all the
blurbs and thoughts leading up to and including the discussion
cribbed from this thread (in order to be ever so much more
metacircular):
https://github.com/luser-dr00g/8086/blob/master/pres

So, the record shows your objection that this is not the way to
learn Forth.

Anton Ertl wrote:
[after notes on lexing/parsing]
> If the audience is somewhat familiar with compiler construction, then
> this is a nice example of how the Forth approach simplifies things.
> If not, you burden your talk with a lot of material just to explain
> that it is unneeded.

[after getting to RPN]
> Again, if the audience is theoretically inclined, this is the
> classical way to inflate their egos by showing that practical stuff is
> always derived from older theoretical ("fundamental") work.  If not,
> no need for the detour through Lukasiewicz.  Note that you leave RPN
> as soon as you use the first DUP or SWAP.  You could just directly say
> that many compilers and interpreters use a stack-based IR because it
> allows simple expression evaluation with (in theory) arbitrarily many
> intermediate results, and that Forth simplification eliminates the
> infix->postfix translation step by letting the programmer express the
> stuff directly in a stack-based way.

> And then you better show that this has advantages beyond making the
> compiler writer's life easier:-)

Any hints for how to do this part? What's the "Killer App" for RPN code?

Anton Ertl wrote:
> Forth is not primarily about RPN.

> To show the advantages I present
> <http://www.euroforth.org/ef99/ertl99.pdf>, which shows that Forth can
> have source code that's a lot smaller, and identifies various factors
> for that.
...




Generic Interpreter design

text input
    |
    V
lexing (lexical analysis)
    |
    V
parsing (syntactical analysis)
    |
    V
IR (intermediate representation)        (Compiler)
    |                             \
    V                              \
execute IR                      generate target code




Lexical analysis
breaking up the "atoms" of the language: identifiers, keywords,
number literals, string literals, etc.
     [state machine, regular expression]

Syntactical analysis
assembles a parse tree data structure representing the 
"sentence structure of the language": functions, declarations,
type designators, statements, expressions.
     [push-down automaton]





Lukasiewicz notation

(the "Polish guy") used a prefix language to write algebraic
expressions without parentheses. His application was Aristotelian
syllogisms so his operators were things like conjunction, implication,
disjunction, kind of a first order propositional logic.

Soon after applied to computers in the 50s.
https://stackoverflow.com/questions/22366141/how-to-understand-the-f-function-in-burks-warren-wrights-lukasiewicz-logic-mach

executing a prefix language requires a hidden runtime stack.
eg. the Logo language, a Lisp without parens.

executing an infix language with precedence can require
- two stacks, eg. the Shunting Yard algorithm, APL algorithm
- or a tree, eg. Tree-Meta, typical CST->AST transform (often AST=IR)




Reverse Polish notation

makes the runtime stack into a user visible data structure. The stack
becomes the /work area/ and the means to pass data into and out of
functions. eg. PostScript

Forth:

 1 2 3 4 . . . .
4 3 2 1 OK

Forth removes much of the complexity of lexing and parsing by
delimiting all tokens by spaces and using reverse polish notation that
requires no sentence structure per se.

Create new procedures by compiling Forth code into a new dictionary
definition. Control structures provide sentence structure but
are compiled piece by piece when encountered sequentially.


So the top level interpreter design becomes

text input
    |
    V
parse space-delimited word
    |
    V
lookup and execute or compile




Byte code interpreter.

A byte code interpreter compiles the text into byte code.

Here we have 2 levels

1 word code is array of addresses of byte code
  - execution is effected by pointing IP into the array and doing NEXT

2 byte code is 8086 machine code so the 
  - execution is effected by running the 8086 machine emulator.

With an appropriate set of words, we could write machine
code *in Forth* by invoking Assembler words that build 
and compile machine code instructions.

At a further level of optimization, WORDs could be compiled by concatenating
the machine code for each code word and omitting the NEXT code.




Runtime support functions.

Roughly half the language is implemented in the lower level language
(here preprocessor "assembly code")

The other half is implemented in the high level language as procedures or functions 
(here precompiled forth words with manually calculated branching)




X-Macros.

My favorite C trick.

Generate an enum and a string table from a single list.

#define LIST(X) X(ZERO) X(ONE) X(TWO) X(THREE) X(FOUR)
#define ENUM(X) X ,
#define STR(X) # X ,
enum numbers { LIST(ENUM) };
char *names[] = { LIST(STR) };

for more:
https://stackoverflow.com/q/6635851/733077




8086 Machine

The 8086 machine instructions start with an opcode byte, eg.

  0x00 add ??,??

oooooodw

d   - direction 0:from 1:to
w   - 1:word 0:byte

which is very often followed by a MOD-REG-REG/MEM (MRM) byte which
has 3 fields

  mm rrr xxx

mm  - MOD     range [0-3]
rrr - REG     range [0-7]
xxx - REG/MEM range [0-7]

(idea: assembler that uses C-style SSA syntax, eg. ax = ax + ax;)

mode 3 register to register

modes 0,1,2 accept 0, 1, or 2 immediate bytes (little endian)
and decode the R/M field to be the contents in memory addressed
by one of the indirect registers (or pairs).

some opcodes do not take an MRM byte and instead are 
Immediate to Accumulator, and take a byte or word (little endian) 
immediately following the opcode byte.

some opcodes like push and pop are selected by just the top 5 bits
of the opcode byte, and the bottom 3 bits encode the register.

ref:
http://bitsavers.org/components/intel/8086/9800722-03_The_8086_Family_Users_Manual_Oct79.pdf

debugged with help from comp.lang.postscript:
https://groups.google.com/d/topic/comp.lang.postscript/6-wfOlxeugk/discussion
debugged with help from comp.lang.asm.x86:
https://groups.google.com/d/topic/comp.lang.asm.x86/8Q81D3PURFI/discussion
https://groups.google.com/d/topic/comp.lang.asm.x86/3vgU39806jo/discussion




Execution of the emulator

Decoding and executing instructions by table lookup and function call.

Assembling instructions by generating comma separated lists of 
(constant expressions yielding) byte values.
(Assemblers and Macro processors have a long and intimate history. eg. MACRO-11)




Interrupts

interface to the BIOS (basic input/output system)

implemented with help from stackExchange
https://retrocomputing.stackexchange.com/q/6610/509

So far, only these interrupts are implemented.
0x
0 : div by zero
10: video functions
  AH=0E: write character tty
15: toggle cpu trace
16: keyboard
  AH=00: read character
21: DOS functions
  AH=01: read character AL
     02: write character DL
     09: write string (DX)..$
     2A: get date
     2C: get time
     4C: exit program
     
initial implementation was just a function void interrupt( int no );
reworked to use ESC instruction* within interrupt functions
called through the standard interrupt vector.

* ESC instruction now has a nonstandard behavior



Bridge to Higher Level

(each new feature often requires implementing the low level ABI,
then writing assembly code to work with it,
and then writing precompiled Forth code to work with that)

Using the read and write DOS functions lets us implement
KEY and EMIT CODE words, the basis of Forth I/O.

Then the Forth words READLINE and INTERPRET build upon KEY,
using a string buffer that builds upon VARIABLE with extra storage space.
And . (ie. DOT) can print out numbers building upon EMIT.




Forth language

Implements many of the words defined in:
https://forthworks.com/forth/standards/F79/F79.pdf
http://www.forth.org/Ting/Forth-for-the-Complete-Idiot/Forth-79-Handy-Reference.pdf
and:
http://forth.org/OffeteStore/1010_SystemsGuideToFigForth.pdf
http://www.forth.org/fig-forth/fig-forth_8086-8088_ver_10.pdf

Future goal is to conform to the 79 standard and then forward from there.




Forth internals

Implemented with much guidance from the series Moving Forth:
https://www.bradrodriguez.com/papers/index.html

Uses 5 registers for execution control
  remaining registers are available in CODE entries.
  uses indirect jumps and a pointer to walk through arrays of addresses
                                                    comprising Forth WORD definitions

                                   8086
W   - working                       ax     (used by NEXT but otherwise available)
X   - eXtra                         bx     (used by NEXT but otherwise available)
IP  - Instruction Pointer           si
PSP - Parameter Stack Pointer       sp
RSP - Return Stack Pointer          bp

Address interpreter.
    si points into the array of addresses
    each code word ends in NEXT to advance through the array
         and jump to the next code word

Subroutine calls using ENTER EXIT and return stack.
    high level word definitions have a pointer to enter in the code field
        array of addresses ends with exit
    enter pushes si on the return stack and sets si to the param field
        the NEXT which ends this code word jumps into the first word of the subroutine
    exit pops si from the return stack
        the NEXT which ends this coce word jumps to the next address after the subr call

next:
    ax = *si++++;
    bx = ax;
    bx = *bx;
    goto *bx;


pushrsp(r):
    bp -= 4;
    *bp = r;
    
poprsp(r):
    r = *bp;
    bp += 4;

    


Defining CODE words and WORD words in the Forth dictionary.

Expanding __VA_ARGS__ into the declaration of either a 
byte array or a short array. The __VA_ARGS__ contain either
the result of the Assembly macros or a list of addresses 
of the cfa of predefined words.

Uses pointer p as the write head into memory. int link keeps
track of the link field of the last entry. So all definitions
form a linked list.

CODE words and WORD words have a code field which is the address
to jump to in order to execute this word. For a WORD, the code field
is the address of ENTER. For CODE words, the code field is the address
of the param field where the machine code is including the terminating
NEXT code.

A few special words are HEADLESS, which means they do not have
a code field. Instead the machine code just starts there.
This is so the address of this code, eg. ENTER, can be placed in 
code field of WORDs, and the machine code is just one indirection away.




Text Interpreter
    readline interpret

    interpret
      begin parse find dup 0= if number else iexec then again

    iexec
      execomp
      
    execomp
      state @ 0= over isimmed or if execute else comma then
      
    comma
      here ! 2 allot
      


boot code
  cold ->  abort ->   quit
           resetrsp   begin resetsp accept               ok  again
                                    readline interpret
	                                     {error->quit}




Constants and Variables as alternatives to ENTER.

             cfa     pfa
  constant  docon  -value-
              push_constant -value-
  variable  dovar  -value-
              push_address_of -value-    // addr --@-- value     value addr --!-- --
  procedure enter  -high-level-code- exit




Compiling COLON definitions

 colon
   create  lit smudged !flags  !name !colon link! ]

 create
   here lit {sizeof(word_entry)} allot !link
   
 semi
   [compile] exit
   latest 0 !flags drop [

 ]  //begin compiling
   state 1 !
 [  //begin interpreting
   state 0 !




Compiling Control Structures.

IF THEN ELSE

   : a dup 0 = if 4 else 5 then ;
   (1,'a',0,...enter, dup, zero, eq, zbranch, 3, four, branch, 1, five, exit)

          dup  0     =   IF
   enter, dup, zero, eq, zbranch, PATCH1,
   stack> addr1

   4     ELSE
   four, branch, PATCH2
   stack> addr2   *patch1=here-patch1
   
   5     THEN
   five, 
   stack> -    *patch2=here-patch2
   
   ;
   exit




DO I LEAVE LOOP

   : b 10 0 do i . leave loop ;
   (a,'b',0,...enter, ten, zero, (do), i, dot, leave, (loop), -5, exit)
 
       compilation                              runtime behavior

          10   0     DO
   enter, ten, zero, (do),                  (do)  >r >r
   stack> addr1

   i  . 
   i, dot,                                    i   <r <r dup >r swap >r
   
   leave
   leave,                                   leave  <r <r drop dup >r >r
   
   LOOP
   (loop), addr1-here                       (loop) <r <r 2dup < if branch_back then
                                                                
   
   ;
   exit




Future Work.

Implementing more 8086 instructions like REP and LOOP.

Further implementation of Forth 79 standard to read code from
in-memory screens and DOS interface to disk files.

Dual-XT system for separate interpret/compile behaviors.
https://groups.google.com/d/topic/comp.lang.forth/GyzL0wIENUw/discussion

Build some application in Forth that runs on top of all this.



Much gratitude to correspondents in comp.lang.forth
https://groups.google.com/d/topic/comp.lang.forth/dz6vHroA6C8/discussion
https://groups.google.com/d/topic/comp.lang.forth/OBwiKKDqgto/discussion
https://groups.google.com/d/topic/comp.lang.forth/Ty8YDZ3R1uw/discussion
https://groups.google.com/d/topic/comp.lang.forth/72Wymtu7cMI/discussion
https://groups.google.com/d/topic/comp.lang.forth/NfdVP_q30vw/discussion
https://groups.google.com/d/topic/comp.lang.forth/mSOMRV37EVE/discussion
https://groups.google.com/d/topic/comp.lang.forth/X3G1Nn6AsKo/discussion
